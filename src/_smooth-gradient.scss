@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

@function _get($list, $type) {
  @each $item in $list {
    @if meta.type-of($item) == $type {
      @return $item;
    }
  }
  @return null;
}

// parse args with support for legacy arguments
@function _parse-args($args...) {
  $kwargs: meta.keywords($args);
  @each $key, $value in list.zip(("from", "to", "start", "end"), $args) {
    $kwargs: map.set($kwargs, $key, $value);
  }
  $from: map.get($kwargs, from) or map.get($kwargs, color);
  $to: map.get($kwargs, to);
  $start: map.get($kwargs, start) or _get($from, number) or 0;
  $end: map.get($kwargs, end) or _get($to, number) or 100%;
  $opacity: map.get($kwargs, opacity);
  @if meta.type-of($to) ==
    number and
    math.is-unitless($to) and
    0 <=
    $to and
    $to <=
    1
  {
    @if $to == $end {
      $end: 100%;
    }
    $opacity: $to;
  }
  $from: _get($from, color) or #000000;
  @if $opacity {
    $from: color.change($from, $alpha: $opacity);
  }
  $to: _get($to, color) or color.change($from, $alpha: 0);

  @return (
    "startColor": $from,
    "endColor": $to,
    "startPos": $start,
    "endPos": $end
  );
}

@function _make-gradient-list($map, $from, $to, $start, $end) {
  $color-stops: ();
  @each $key, $mod in $map {
    $position: $mod * ($end - $start) + $start;
    $new-stop: color.mix($from, $to, $key * 100%);
    $color-stops: list.append($color-stops, $new-stop $position, "comma");
  }
  @return $color-stops;
}

// `scrim` smoothing
// @function scrim($from: null, $to: null, $color: null, $opacity: null, $start: null, $end: null) {
//   $start: $start or _get($from, number) or 0;
//   $end: $end or _get($to, number) or 100%;
//   $from: $color or _get($from, color) or #000000;
//   $opacity: $opacity or meta.type-of($to) == number and math.is-unitless($to) and 0 <= $to and $to <= 1 and $to;
//   @if $opacity {
//     $from: color.change($from, $alpha: $opacity);
//   }
//   $to: _get($to, color) or rgba($from, 0);

// `scrim` smoothing
@function scrim($args...) {
  $args: _parse-args($args...);
  $from: map.get($args, "startColor");
  $to: map.get($args, "endColor");
  $start: map.get($args, "startPos");
  $end: map.get($args, "endPos");

  // validate arguments
  @if not math.compatible($start, $end) {
    @error '$start and $end values must be compatible: were #{$start} and #{$end}';
  }

  $scrim: (
    1: 0,
    0.738: 0.19,
    0.541: 0.34,
    0.382: 0.47,
    0.278: 0.565,
    0.194: 0.65,
    0.126: 0.73,
    0.075: 0.802,
    0.042: 0.861,
    0.021: 0.91,
    0.008: 0.952,
    0.002: 0.982,
    0: 1,
  );
  @return _make-gradient-list($scrim, $from, $to, $start, $end);
}

// `easeOutSine` smoothing
@function easeOutSine($args...) {
  $args: _parse-args($args...);
  $from: map.get($args, "startColor");
  $to: map.get($args, "endColor");
  $start: map.get($args, "startPos");
  $end: map.get($args, "endPos");

  // validate arguments
  @if not math.compatible($start, $end) {
    @error '$start and $end values must be compatible: were #{$start} and #{$end}';
  }

  $easeOutSine: (
    1: 0,
    0.917: 0.053,
    0.834: 0.106,
    0.753: 0.159,
    0.672: 0.213,
    0.591: 0.268,
    0.511: 0.325,
    0.433: 0.384,
    0.357: 0.445,
    0.283: 0.509,
    0.213: 0.577,
    0.147: 0.65,
    0.089: 0.729,
    0.042: 0.814,
    0.011: 0.906,
    0: 1,
  );
  @return _make-gradient-list($easeOutSine, $from, $to, $start, $end);
}

// `clothoid` smoothing
@function clothoid($args...) {
  $args: _parse-args($args...);
  $from: map.get($args, "startColor");
  $to: map.get($args, "endColor");
  $start: map.get($args, "startPos");
  $end: map.get($args, "endPos");

  // validate arguments
  @if not math.compatible($start, $end) {
    @error '$start and $end values must be compatible: were #{$start} and #{$end}';
  }

  $clothoid: (
    1: 0,
    0.3: 0.5,
    0.15: 0.65,
    0.075: 0.755,
    0.037: 0.8285,
    0.019: 0.88,
    0: 1,
  );
  @return _make-gradient-list($clothoid, $from, $to, $start, $end);
}
